---
title: "Olympic Games"
format: 
  dashboard:
    orientation: columns
logo: images/olympics-logo.svg
logo-alt: "Olympics logo with multicolored circles."
---

```{python}
#| label: load-packages
from plotnine import *
import great_tables as gt
import pandas as pd
```

```{python}
#| label: load-data
olympics_full = pd.read_csv("../data/olympics.csv", low_memory=False)
```

```{python}
#| label: prep-data
# Filter for non-NA medals
olympics = olympics_full.loc[olympics_full["medal"].notna()]

# Split the team column at "-" into two columns
split_data = olympics["team"].str.split("-", n=1, expand=True)
olympics.loc[:, "team"] = split_data[0]

# Reorder the medal column categories
olympics.loc[:, "medal"] = pd.Categorical(olympics["medal"], categories=["Bronze", "Silver", "Gold"])
```

```{python}
#| label: summmer-prep-data
olympics = olympics[(olympics["season"] == "Summer")]
olympics.reset_index(drop=True, inplace=True)
```

## Column - Medals by sport and year {width=65%}

### Row - Medals by sport {height=60%}

```{python}
#| label: summer-medals-by-sport
#| title: Medals by sport

# Lump the sport column to top 15 categories, grouping others as Other
top_15_sports = olympics["sport"].value_counts().nlargest(15).index
olympics["sport"] = olympics["sport"].apply(lambda x: x if x in top_15_sports else "Other")

# Convert the sport column to a categorical type with order based on frequency, and reverse the order
olympics["sport"] = pd.Categorical(olympics["sport"], categories = olympics["sport"].value_counts().index[::-1])

# Move the Other category of the sport column to the beginning
new_order = ["Other"] + [cat for cat in olympics["sport"].cat.categories if cat != "Other"]
olympics["sport"] = olympics["sport"].cat.reorder_categories(new_order)

# Plot
(
    ggplot(olympics, aes(x = "sport", fill = "medal")) +
    geom_bar() +
    coord_flip() +
    guides(fill=guide_legend(reverse=True)) +
    scale_fill_manual(
        values={"Gold":"#d4af37", "Silver":"#c0c0c0", "Bronze":"#cd7f32"}
    ) + 
    labs(
        x="",
        y="",
        fill="Medal"
    ) +
    theme_minimal() +
    theme(
        legend_position="inside",
        legend_position_inside=(0.9, 0.2),
        legend_direction="horizontal",
        legend_background=element_rect(fill="white", color="gray"),
        figure_size=(10, 6.18)
    )
)
```

### Row - Medals by year {height=40%}

::: {.card title="Medals by year"}
Due to World War II, no olympic games were held in 1940 and 1944.

```{python}
#| label: summer-medals-by-year
#| title: Medals by year

# Count the occurrences of each medal per year
olympics_count=olympics.groupby(["year", "medal"], observed=True).size().reset_index(name="n")

# Plot
(
    ggplot(olympics_count, aes(x="year", y="n", color="medal")) +
    geom_point(size=0.5) +
    geom_line() +
    guides(color=guide_legend(reverse=True)) + 
    scale_x_continuous(breaks=range(1896, 2020, 8)) +
    scale_color_manual(
        values={"Gold":"#d4af37", "Silver":"#c0c0c0", "Bronze":"#cd7f32"}
    ) + 
    scale_fill_manual(
        values={"Gold":"#d4af37", "Silver":"#c0c0c0", "Bronze":"#cd7f32"}
    ) +
    labs(x="Year", y="", color="Medal") +
    theme_minimal() +
    theme(
        legend_position="inside",
        legend_position_inside=(0.9, 0.2),
        legend_direction="horizontal",
        legend_background=element_rect(fill="white", color="gray"),
        figure_size=(10, 3)
    )
)
```
:::

## Column - Medals by country {width=35%}

### Row - Value boxes {height=30%}

```{python}
#| label: summer-calculate-most-medals

# Filter for gold medals
gold_medals = olympics[olympics['medal'] == 'Gold']
# Group by team and count gold medals
gold_medal_counts = gold_medals.groupby('team').size()
# Find the team with the most gold medals
most_gold_medals = gold_medal_counts.idxmax()
count_most_gold_medals = gold_medal_counts.max()

# Filter for silver medals
silver_medals = olympics[olympics['medal'] == 'Silver']
# Group by team and count silver medals
silver_medal_counts = silver_medals.groupby('team').size()
# Find the team with the most silver medals
most_silver_medals = silver_medal_counts.idxmax()
count_most_silver_medals = silver_medal_counts.max()

# Filter for bronze medals
bronze_medals = olympics[olympics['medal'] == 'Bronze']
# Group by team and count bronze medals
bronze_medal_counts = bronze_medals.groupby('team').size()
# Find the team with the most bronze medals
most_bronze_medals = bronze_medal_counts.idxmax()
count_most_bronze_medals = bronze_medal_counts.max()
```

::: {.valuebox icon="award-fill" color="#d4af37"}
Most golds: 

`{python} str(count_most_gold_medals)`

`{python} most_gold_medals`
:::

::: {.valuebox icon="award-fill" color="#c0c0c0"}
Most silvers: 

`{python} str(count_most_silver_medals)`

`{python} most_silver_medals`
:::

::: {.valuebox icon="award-fill" color="#cd7f32"}
Most bronzes: 

`{python} str(count_most_bronze_medals)`

`{python} most_bronze_medals`
:::

### Row - Tabsets of tables {height=70% .tabset}

```{python}
#| label: summer-team-total-medals

# Count the occurrences of each medal per team
olympics_count = olympics.groupby(["team", "medal"]).size().reset_index(name="n")

# Pivot olympics_count to get medals as columns
olympics_pivot = olympics_count.pivot_table(index = "team", columns = "medal", values = "n", fill_value = 0)

# Calculate the total number of medals
olympics_pivot["Total"] = olympics_pivot[["Bronze", "Gold", "Silver"]].sum(axis=1)

# Reset the index and rearrange columns
olympics_pivot = olympics_pivot.reset_index()
olympics_pivot = olympics_pivot[["team", "Gold", "Silver", "Bronze", "Total"]]

# Sort by Total medals, then team
olympics_sorted_descending = olympics_pivot.sort_values(by=["Total", "team"], ascending=[False, True])
olympics_sorted_ascending = olympics_pivot.sort_values(by=["Total", "team"], ascending=[True, True])

# Remove Total
olympics_sorted_descending = olympics_sorted_descending[["team", "Gold", "Silver", "Bronze"]]
olympics_sorted_ascending = olympics_sorted_ascending[["team", "Gold", "Silver", "Bronze"]]

# Rename the team column to Team
olympics_sorted_descending.rename(columns={"team": "Team"}, inplace=True)
olympics_sorted_ascending.rename(columns={"team": "Team"}, inplace=True)

# Find top and bottom 30
olympics_sorted_descending_top30 = olympics_sorted_descending.head(30)
olympics_sorted_descending_top30.reset_index(drop=True, inplace=True)
olympics_sorted_ascending_bottom30 = olympics_sorted_ascending.head(30)
olympics_sorted_ascending_bottom30.reset_index(drop=True, inplace=True)
```

::: {.card title="Top 30 total medals"}
Teams sorted in descending order of total medals.

```{python}
#| label: summer-top-30-medals
(
    gt.GT(olympics_sorted_descending_top30).data_color(
        columns=["Gold", "Silver", "Bronze"],
        palette="Oranges"
    )
)
```
:::

::: {.card title="Bottom 30 total medals"}
Teams sorted in ascending order of total medals.

```{python}
#| label: summer-bottom-30-medals
(
    gt.GT(olympics_sorted_ascending_bottom30).data_color(
        columns=["Gold", "Silver", "Bronze"],
        palette="Blues"
    )
)
```
:::
